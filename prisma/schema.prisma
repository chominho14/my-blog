// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // 한 객체가 다른 객체에 연결된 상태를 생성하려고 할 때
  // 그 연결 받는 객체가 존재한다는 것을 보장
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  // previewFeatures와 같이 쓰임
  referentialIntegrity = "prisma"
}

model User {
  id          Int           @id @default(autoincrement())
  socialOnly  Boolean       @default(false)
  phone       String?       @unique
  email       String        @unique
  name        String
  avatar      String?
  password    String
  region      String?       @default("korea")
  isAdmin     Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  algorithms  Algorithm[]
  fav         Fav[]
  posts       Post[]
  answers     Answer[]
  wonderings  Wondering[]
  SkillAnswer SkillAnswer[]
}

model Algorithm {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  image        String
  title        String        @db.MediumText
  subtitle     String        @db.MediumText
  explanation  String        @db.MediumText
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  favs         Fav[]
  skillAnswers SkillAnswer[]

  @@index([userId])
}

model SkillAnswer {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  algorithm   Algorithm @relation(fields: [algorithmId], references: [id], onDelete: Cascade)
  algorithmId Int
  skillAnswer String    @db.MediumText

  @@index([userId])
  @@index([algorithmId])
}

model Fav {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  algorithm   Algorithm @relation(fields: [algorithmId], references: [id], onDelete: Cascade)
  algorithmId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([algorithmId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  answers   Answer[]
  wondering Wondering[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId])
  @@index([postId])
}
